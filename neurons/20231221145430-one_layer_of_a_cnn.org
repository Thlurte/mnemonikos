:PROPERTIES:
:ID:       05d02e90-3075-44df-aa1e-63f27f23f5ea
:END:
#+title: One Layer of a CNN
Lets say that we convolved a RGB image on two filters and got results as 4 \times 4 \times 2. To turn this output into a neural net layer we will add bias and apply non linearity.

So given that there is a 6 \times 6 \times 3 image, and we use two 3 \times 3 \times 3 filters to convolve over the image.

#+DOWNLOADED: screenshot @ 2023-12-26 07:20:55
#+attr_org: :width 250
[[file:../../../journal/_resources/org_20231226-072055_screenshot.png]]

Then we add b_{1} and non linearity.

#+DOWNLOADED: screenshot @ 2023-12-26 07:32:32
#+attr_org: :width 250
[[file:../../../journal/_resources/org_20231226-073232_screenshot.png]]

So the forward propagation would look like :

\begin{align}
z^{[1]}=w^{[1]}\cdot a^{[0]}+b^{[1]}
\\
a^{[1]}=g(z^{[1]})
\end{align}

In this formula a^{[0]} is the image itself, and w^{[1]} are the filters. z^{[1]} in case is where we apply non-linearity.

To go about give an extensive desciption of forward prop of conv net :
- f^{[l]}  = filter size;  f^{[l]} \times f^{[l]} \times n_{c}^{[l-1]} = Each filter is    
- p^{[l]}= padding
- s^{[l]}  = stride

Activation = a^{[l]} \rightarrow n_{H}^{[l]} \times n_{W}^{[l]} \times n_{c}^{[l-1]}
Weights = f^{[l]} \times f^{[l]} \times n_{c}^{[l-1]} \times n_{c}^{[l]}
Bias = n_{c}^{[l]}

Input = n^{[l-1]}_{H} \times n^{[l-1]}_{W}\times n^{[l-1]_{c}_{}
Output = n^{[l]}_{H} \times n^{[l]}_{W}\times n^{[1]}_{c}


