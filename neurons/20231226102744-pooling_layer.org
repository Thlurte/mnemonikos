:PROPERTIES:
:ID:       4818da59-8a28-4ff8-abfa-a00055b0133e
:END:
#+title: Pooling Layer
In convolutional architectures , we also use pooling layers to reduce the size of the representation, to speed the computation.

Like convolutional layers, pooling operators consist of a fixed-shape window that is slid over all regions in the input according to its stride, computing a single output for each location traversed by the fixed-shape window (sometimes known as the pooling window). However, unlike the cross-correlation computation of the inputs and kernels in the convolutional layer, the pooling layer contains no parameters (there is no kernel). Instead, pooling operators are deterministic, typically calculating either the maximum or the average value of the elements in the pooling window. These operations are called maximum pooling (max-pooling for short) and average pooling, respectively.

In both cases, as with the cross-correlation operator, we can think of the pooling window as starting from the upper-left of the input tensor and sliding across it from left to right and top to bottom. At each location that the pooling window hits, it computes the maximum or average value of the input subtensor in the window, depending on whether max or average pooling is employed.

#+DOWNLOADED: screenshot @ 2023-12-26 10:35:21
[[file:../../../journal/_resources/org_20231226-103521_screenshot.png]]

Max-pooling with a pooling window shape of 2 \times 2. The shaded portions are the first output element as well as the input tensor elements used for the output computation:

$$
max(0,1,3,4)=4
$$

The output tensor  has a height of 2 and a width of 2. The four elements are derived from the maximum value in each pooling window:

\begin{align}
max(0,1,3,4)=4 \\
max(1,2,4,5)=5 \\
max(3,4,6,7)=7 \\
max(4,5,7,8)=8 \\
\end{align}
So the hyperparameters of pooling layer would be;
- f : filter size
- s : stride
- max or average pooling

 Giving us :

\begin{align}
\Big[\frac{n_{H}-f}{s}+1\Big] \times \Big[\frac{n_{W}-f}{s}+1\Big]\times n_{c}
\end{align}

  
#+begin_src python
  import numpy
  def pool2d(X,pool_size,mode):
    p_h,p_w=pool_size
    Y=numpy.zeros((X.shape[0]-p_h+1,X.shape[1]-p_w+1))
    for i in range(Y.shape[0]):
      for j in range(Y.shape[1]):
        if mode == 'max':        
          Y[i,j]=numpy.max(X[i:i+p_h:,j:j+p_w].flatten())
        elif mode == 'avg':
          Y[i,j]=numpy.mean(X[i:i+p_h,j:j+p_w].flatten())
    return Y

  X = numpy.array([[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]])
  
  return pool2d(X,(2,2),'max')
#+end_src

#+RESULTS:
| 4 | 5 |
| 7 | 8 |

